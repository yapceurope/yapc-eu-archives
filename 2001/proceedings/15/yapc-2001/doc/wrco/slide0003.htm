<HTML>
<!-- *** Created by pp2html, build 1.22 from PerlPoint-Converters 0.1001  -->
<HEAD>
<TITLE>The base design</TITLE>
</HEAD>
<!-- ************************************************************** -->
<BODY bgcolor="#FFFFFF" text="#000000" link="#0000CC" vlink="#AAAAAA" alink="#FF0000">
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.1.1.1 $
  $Date: 2004/06/12 15:13:37 $
-->

<TABLE> 
<TR>
  <TD colspan=3 >
    Next: <a href="slide0004.htm">The language implementation</a>
    &nbsp;&nbsp;Previous: <a href="slide0002.htm">The architecture of a converter</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Index">Contents</a>
  </td>
</TR>
</TABLE>
<a name="The base design">

<H1>2.1 The base design
</H1>


<P>
To relieve converter authors, the CPAN distribution <CODE>PerlPoint::Package</CODE> provides a framework to write converters. The simple idea is that because all converters have to process PerlPoint sources (and should do this the same way), there's no need to implement this parsing again and again. So the framework provides a <I>parser</I> which reads the sources and generates data which contain the source contents. Please have a look at the following image.
</P>
<IMG SRC="./pp-src-stream-e.png" ALT="./pp-src-stream-e.png">

<P>
The parser reads PerlPoint sources and checks them for integrity. Valid sources are translated into intermediate data which is called a &quot;stream&quot;, so all converters will be fed with correct input. The parser is provided by the framework class <B>PerlPoint::Parser</B>. It implements the PerlPoint base language definition to recognize paragraphs, macros, variables, tags, and so on.
</P>


<P>
Once we have the intermediate data, there's another job all converters need to perform the same way: these data need to be processed as well. It's seems to be a good idea to encapsulate this processing by another general interface. This relieves converter authors even more, freeing them from the need of dealing with the details of the stream implementation. (Which may occasionally change.) So there's another framework class called <B>PerlPoint::Backend</B>. Its objects can walk through the stream, calling user defined functions to provide its elements. And these callbacks are the place where the target format is produced.
</P>
<IMG SRC="./pp-stream-result-e.png" ALT="./pp-stream-result-e.png">

<P>
With this framework, a converter author can focus just on target format generation. That's the part naturally most interesting to him.
</P>
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.1.1.1 $
  $Date: 2004/06/12 15:13:37 $
-->

<TABLE> 
<TR>
  <TD colspan=3 >
    Next: <a href="slide0004.htm">The language implementation</a>
    &nbsp;&nbsp;Previous: <a href="slide0002.htm">The architecture of a converter</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Index">Contents</a>
  </td>
</TR>
</TABLE>
</BODY>
</HTML>
