<HTML>
<!-- *** Created by pp2html, build 1.22 from PerlPoint-Converters 0.1001  -->
<HEAD>
<TITLE>Tag definition</TITLE>
</HEAD>
<!-- ************************************************************** -->
<BODY bgcolor="#FFFFFF" text="#000000" link="#0000CC" vlink="#AAAAAA" alink="#FF0000">
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.1.1.1 $
  $Date: 2004/06/12 15:13:37 $
-->

<TABLE> 
<TR>
  <TD colspan=3 >
    Next: <a href="slide0010.htm">Tag sets</a>
    &nbsp;&nbsp;Previous: <a href="slide0008.htm">Writing a tag module</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Index">Contents</a>
  </td>
</TR>
</TABLE>
<a name="Tag definition">

<H1>3.2.1 Tag definition
</H1>


<P>
Now the tags can be declared. Tag declarations are expected in a global hash named <B><CODE>%tags</CODE></B>. Each key is the name of a tag, while descriptions are nested structures stored as values.
</P>


<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<FONT COLOR="#000000">
  # pragmata
  use strict;
  use vars qw(%tags %sets);

  # tag declarations
  %tags=(
         EMPHASIZE =&gt; {
                       # options
                       options =&gt; TAGS_OPTIONAL,

                       # don't miss the body!
                       body    =&gt; TAGS_MANDATORY,
                      },

         COLORIZE =&gt; {...},

         FONTIFY  =&gt; {...},

         ...
        );
</FONT></PRE></TD></TR></TABLE>


<P>
This looks complicated but is easy to understand. The <CODE>option</CODE> and <CODE>body</CODE> slots express if options and body are obsolete, optional or mandatory. This is done by using constants provided by <B><CODE>PerlPoint::Constants</CODE></B> (which comes with the framework). The following constants are defined:
</P>
<TABLE border=2><TR>
<TD><B>constant</B></TD><TD><B>meaning</B></TD></TR>
<TR>
<TD><B><CODE>TAGS_OPTIONAL</CODE></B></TD><TD>Options/body can be used or not.</TD></TR>
<TR>
<TD><B><CODE>TAGS_MANDATORY</CODE></B></TD><TD>The option/body part <I>must</I> be specified.</TD></TR>
<TR>
<TD><B><CODE>TAGS_DISABLED</CODE></B></TD><TD>No need to use options/body. <I>The parser will not expect such parts.</I> This means that with an obsolete body, an <CODE>&lt;anything&gt;</CODE> sequence will not be treated as a tag body but as plain text. Likewise, if options are declared to be obsolete and a <CODE>{thing=something}</CODE> follows the tag name, this will be detected as plain text, not as the tag options. This can cause syntactical errors if the body is mandatory, because in this case the parser expects the body to follow the tag name.</TD></TR>
</TABLE>
<P>


<P>
Omitted <CODE>options</CODE> or <CODE>body</CODE> slots mean that options or body are <I>optional</I>.
</P>


<P>
If you need further checks you can hook into the parser by using the <CODE>hook</CODE> key, specifying a subroutine:
</P>


<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<FONT COLOR="#000000">
  %tags=(
         EMPHASIZE =&gt; {
                       # options
                       options =&gt; TAGS_OPTIONAL,

                       # perform special checks
                       <B>hook</B> =&gt; sub {
                                    # get parameters
                                    my ($tagline, $options, @body)=@_;

                                    # checks
                                    $rc=...

                                    reply results
                                    $rc;
                                   }
                      },

         COLORIZE =&gt; {...},

         FONTIFY  =&gt; {...},

         ...
        );
</FONT></PRE></TD></TR></TABLE>


<P>
Whenever the parser detects an occurence of the defined tag, it will invoke the hook function and pass the source line, a reference to a hash of option name / value pairs to check, and a body array. Using the option hash reference, <I>the hook can modify the options</I>. Different to this, the body array is <I>a copy</I> of the body part of the stream. Therefore the hook cannot modify the body part.
</P>


<P>
A hook should return one of the following codes (defined by <B><CODE>PerlPoint::Constants</CODE></B>):
</P>
<TABLE border=2><TR>
<TD><B>return code</B></TD><TD><B>description</B></TD></TR>
<TR>
<TD><B><CODE>PARSING_COMPLETED</CODE></B></TD><TD>Parsing will be stopped <I>immediately</I>. The source is declared to be valid.</TD></TR>
<TR>
<TD><B><CODE>PARSING_ERROR</CODE></B></TD><TD>A semantic error occurred. This error will be counted, but parsing will be continued to possibly detect even more errors.</TD></TR>
<TR>
<TD><B><CODE>PARSING_FAILED</CODE></B></TD><TD>A syntactic error occured. Parsing will be stopped immediately.</TD></TR>
<TR>
<TD><B><CODE>PARSING_OK</CODE></B></TD><TD>The checked object is declared to be OK, parsing will be continued.</TD></TR>
</TABLE>
<P>


<P>
Here's an example hook from the implementation of <CODE>\IMAGE</CODE>. It checks if all necessary options were set and if a specified image file really exists (to warn a user when an invalid image file is detected). Finally, it modifies the source option to provide the absolute path to the backend, which is known when the source is parsed, but unknown when the backend processes the stream.
</P>


<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<FONT COLOR="#000000">
  sub
   {
    # declare and init variable
    my $ok=PARSING_OK;

    # take parameters
    my ($tagLine, $options)=@_;

    # check them
    $ok=PARSING_FAILED, warn qq(nn[Error] Missing &quot;src&quot; option in IMAGE tag, line $tagLine.n)
       unless exists $options-&gt;{src};
    $ok=PARSING_ERROR,  warn qq(nn[Error] Image file &quot;$options-&gt;{src}&quot; does not exist or is no file in IMAGE tag, line $tagLine.n)
       if $ok==PARSING_OK and not (-e $options-&gt;{src} and not -d _);

    # absolutify the image source path (should work on UNIX and DOS, but other systems?)
    my ($base, $path, $type)=fileparse($options-&gt;{src});
    $options-&gt;{src}=join('/', abs_path($path), basename($options-&gt;{src}))
       if $ok==PARSING_OK;

    # supply status
    $ok;
   },
</FONT></PRE></TD></TR></TABLE>


<P>
Hooks are an interesting way to extend document parsing, but please take into consideration that tag hooks might be called quite often. So, if checks have to be performed, users will be glad if they are performed quickly.
</P>


<P>
Please note that there are no tag namespaces. Although Perl modules are used to define the tags, tags declared by various <CODE>PerlPoint::Tags::Xyz</CODE> share the same one &quot;global scope&quot;, because a PerlPoint document author simply uses all tag names the same way, regardless where they were defined. This means that different tags should be <I>named</I> different.
</P>
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.1.1.1 $
  $Date: 2004/06/12 15:13:37 $
-->

<TABLE> 
<TR>
  <TD colspan=3 >
    Next: <a href="slide0010.htm">Tag sets</a>
    &nbsp;&nbsp;Previous: <a href="slide0008.htm">Writing a tag module</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Index">Contents</a>
  </td>
</TR>
</TABLE>
</BODY>
</HTML>
