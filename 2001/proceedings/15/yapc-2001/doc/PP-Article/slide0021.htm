<HTML>
<!-- *** Created by pp2html, build 1.22 from PerlPoint-Converters 0.1001  -->
<HEAD>
<TITLE>Writing converters</TITLE>
</HEAD>
<!-- ************************************************************** -->
<BODY bgcolor="#FFFFFF" text="#000000" link="#0000CC" vlink="#AAAAAA" alink="#FF0000">
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.1.1.1 $
  $Date: 2004/06/12 15:13:36 $
-->

<TABLE> 
<TR>
  <TD colspan=3 >
    Next: <a href="slide0022.htm">Available Translators</a>
    &nbsp;&nbsp;Previous: <a href="slide0020.htm">The stream format</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Index">Contents</a>
  </td>
</TR>
</TABLE>
<a name="Writing converters">

<H1>5.4 Writing converters
</H1>
<IMG SRC="./pp-stream-result-e.png" ALT="./pp-stream-result-e.png">

<P>
The stream format is currently very easy, but it would make no sense to let every converter author deal with it again, which would make it hard to modify the format as well. So <B>PerlPoint::Backend</B> encapsulates the stream access. Whoever want to write a converter only needs to make an object of this class
</P>


<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<FONT COLOR="#000000">
  # load the module:
  use PerlPoint::Backend;

  # build the backend
  my <B>($backend)=new PerlPoint::Backend(name=&gt;'html')</B>;
</FONT></PRE></TD></TR></TABLE>


<P>
and to register callbacks to handle all directives (like headlines or tags) which will be found in the stream.
</P>


<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<FONT COLOR="#000000">
  # register headline handler
  $backend-&gt;<B>register(DIRECTIVE_HEADLINE, \&amp;handleHeadline)</B>;
</FONT></PRE></TD></TR></TABLE>


<P>
When all preparations are completed the backend can be started to process a stream generated by the parser.
</P>


<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<FONT COLOR="#000000">
  # translate
  $backend-&gt;<B>run(\@stream)</B>;
</FONT></PRE></TD></TR></TABLE>


<P>
<CODE>run()</CODE> walks through the stream and detects the type of each entry. If a callback was registered to handle this type, it will be invoked, otherwise the entry is ignored. This means that a converter means to register callbacks for simple contents (literal strings) as well. Ignoring parts is useful if a target format does not provide all features of PerlPoint.
</P>


<P>
Let's assume that <CODE>run()</CODE> detects a directive which flags the begin of a headline. In this case, the method invokes the registered callback <CODE>handleHeadline()</CODE> and passes the parameters <CODE>DIRECTIVE_HEADLINE</CODE>, <CODE>DIRECTIVE_START</CODE> and the headline level which is stored in the directive array. To deal with these parameters, a headline handler could look like this:
</P>


<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<FONT COLOR="#000000">
  sub handleHeadline
   {
    # get and check parameters
    my <B>($directive, $startStop, $level)=@_</B>;
    confess &quot;Something is wrong\n&quot;
      unless $directive==DIRECTIVE_HEADLINE;

    # begin or close a headline
    if ($startStop==DIRECTIVE_START)
      {print &quot;&lt;head$level&gt;&quot;;}
    else
      {print &quot;&lt;/head&gt;&quot;;}
   }
</FONT></PRE></TD></TR></TABLE>


<P>
This handler would simply write the beginning HTML headline tag. Later on, when the headline will be completed by another directive in the stream, <CODE>run()</CODE> will invoke the function with <CODE>DIRECTIVE_COMPLETED</CODE> instead of <CODE>DIRECTIVE_START</CODE> which will enforce the callback to write the closing headline tag.
</P>


<P>
This simple principle has been very sufficient in the converters already implemented.
</P>
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.1.1.1 $
  $Date: 2004/06/12 15:13:36 $
-->

<TABLE> 
<TR>
  <TD colspan=3 >
    Next: <a href="slide0022.htm">Available Translators</a>
    &nbsp;&nbsp;Previous: <a href="slide0020.htm">The stream format</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Index">Contents</a>
  </td>
</TR>
</TABLE>
</BODY>
</HTML>
