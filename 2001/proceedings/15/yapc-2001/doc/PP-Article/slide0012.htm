<HTML>
<!-- *** Created by pp2html, build 1.22 from PerlPoint-Converters 0.1001  -->
<HEAD>
<TITLE>Internal Architecture</TITLE>
</HEAD>
<!-- ************************************************************** -->
<BODY bgcolor="#FFFFFF" text="#000000" link="#0000CC" vlink="#AAAAAA" alink="#FF0000">
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.1.1.1 $
  $Date: 2004/06/12 15:13:36 $
-->

<TABLE> 
<TR>
  <TD colspan=3 >
    Next: <a href="slide0013.htm">A Modular Concept</a>
    &nbsp;&nbsp;Previous: <a href="slide0011.htm">Embedded Code</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Index">Contents</a>
  </td>
</TR>
</TABLE>
<a name="Internal Architecture">

<H1>5 Internal Architecture
</H1>


<P>
For the user, PerlPoint looks like normal text which must be structured according to some simple rules. But internally it is a kind of <I>programming language</I> (which offers the power of Perl, see below)! This language must be analyzed, the contents must be structured and finally expressed with the means of the target language (e. g. HTML or LaTeX). In this meaning, a PerlPoint converter is a kind of compiler. We have the phases of lexial analysis, generation of intermediate code and finally code generation. A simple filter can combine all theses steps but this is not very flexible. Therefore we decided to use a modular concept by separating theses steps into dedicated modules.
</P>
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.1.1.1 $
  $Date: 2004/06/12 15:13:36 $
-->

<TABLE> 
<TR>
  <TD colspan=3 >
    Next: <a href="slide0013.htm">A Modular Concept</a>
    &nbsp;&nbsp;Previous: <a href="slide0011.htm">Embedded Code</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Index">Contents</a>
  </td>
</TR>
</TABLE>
</BODY>
</HTML>
