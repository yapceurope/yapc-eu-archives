<HTML>
<!-- *** Created by pp2html, build 1.22 from PerlPoint-Converters 0.1001  -->
<HEAD>
<TITLE>More than presentations</TITLE>
</HEAD>
<!-- ************************************************************** -->
<BODY bgcolor="#FFFFFF" text="#000000" link="#0000CC" vlink="#AAAAAA" alink="#FF0000">
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.1.1.1 $
  $Date: 2004/06/12 15:13:36 $
-->

<TABLE> 
<TR>
  <TD colspan=3 >
    Next: <a href="slide0026.htm">Future versions</a>
    &nbsp;&nbsp;Previous: <a href="slide0024.htm">pp2latex and pp2sdf</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Index">Contents</a>
  </td>
</TR>
</TABLE>
<a name="More than presentations">

<H1>7 More than presentations
</H1>


<P>
PerlPoint is no contents managment system, no publishing tool and no text processor, but nevertheless is can be used to perform several tasks in these fields. And even as a presentation tool it can be used for more than just the slide production. Think of
</P>

<UL>
<LI><B>Presentation supplements.</B> Handouts and speaker notes can be maintained together with the slide source, in <I>one</I> document. They can be transformed into the document format of ones choice (Latex, PostScript, PDF, HTML, maybe via SDF) and subsequently printed. PerlPoint conditions control that slide and handout versions are as different as necessary - handouts could provide more details than the usually short slide statements.</LI>
</UL>

<UL>
<LI><B>Text processing.</B> The source format is similarly structured to SDF, and there are several converters to well printable formats available. Why not treat PerlPoint as a document format or markup language? This article, for example, is completely authored in PerlPoint. A source written today may be partially or completely published in another format in the future, so already written parts will be reusable. Future converters may even allow to produce complete conference materials or something similar from various PerlPoint articles.</LI>
</UL>

<UL>
<LI><B>Documentation.</B> Dynamic contents allow to make documents out of databases or system states and process results. <CODE>\INCLUDE</CODE> allows project teams to compose documentations from numerous nested (and standalone usable) partial documents. An editor could control the way a composed document is built. Conditions allow to describe one and the same object from various points of view (implementation, installation, usage, support, ...) and to generate accordingly specialized  documents from a source.</LI>
</UL>

<UL>
<LI><B>Training.</B> While going on with the lessons, conditions allow to show more and more themes. Various output formats allow to produce both slides and training materials from the same source. Solutions could be integrated into the trainers version, but hidden in the slides made available to trainees. Materials can be easily adapted to the level of a class or a certain training. Several trainers can provide parts of the materials easily.</LI>
</UL>
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.1.1.1 $
  $Date: 2004/06/12 15:13:36 $
-->

<TABLE> 
<TR>
  <TD colspan=3 >
    Next: <a href="slide0026.htm">Future versions</a>
    &nbsp;&nbsp;Previous: <a href="slide0024.htm">pp2latex and pp2sdf</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Index">Contents</a>
  </td>
</TR>
</TABLE>
</BODY>
</HTML>
