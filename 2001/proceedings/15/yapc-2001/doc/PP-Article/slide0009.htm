<HTML>
<!-- *** Created by pp2html, build 1.22 from PerlPoint-Converters 0.1001  -->
<HEAD>
<TITLE>Dynamic Contents</TITLE>
</HEAD>
<!-- ************************************************************** -->
<BODY bgcolor="#FFFFFF" text="#000000" link="#0000CC" vlink="#AAAAAA" alink="#FF0000">
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.1.1.1 $
  $Date: 2004/06/12 15:13:36 $
-->

<TABLE> 
<TR>
  <TD colspan=3 >
    Next: <a href="slide0010.htm">Conditions</a>
    &nbsp;&nbsp;Previous: <a href="slide0008.htm">Macros</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Index">Contents</a>
  </td>
</TR>
</TABLE>
<a name="Dynamic Contents">

<H1>4.5 Dynamic Contents
</H1>


<P>
PerlPoint allows to use conditions and to embed Perl code.
</P>


<P>
This is not the default. A PerlPoint converter must activate dynamical contents by calling the parser with a special option for reasons of security.
</P>


<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<FONT COLOR="#000000">
 <B>use Safe;</B>
 use PerlPoint::Backend;
 use PerlPoint::Constants;
 use PerlPoint::Parser 0.34;

 # build parser
 my ($parser)=new PerlPoint::Parser;

 # and call it
 $parser-&gt;run(
              stream  =&gt; \@streamData,
              files   =&gt; \@ARGV,
              <B>safe    =&gt; new Safe,</B>
              ...
            );
</FONT></PRE></TD></TR></TABLE>


<P>
Dynamical (or &quot;active&quot;) contents is activated by passing a <B>Safe</B>-Object to the parser.
</P>


<P>
Embedded Perl code is usually evaluated in a <B><CODE>Safe</CODE></B> compartment. This way it is possible to control which kind of operations are allowed by configuring <CODE>Safe</CODE> object for accepted opcodes. (See the documentation of the <CODE>Safe</CODE> and <CODE>Opcode</CODE> modules for further details.) In <CODE>pp2html</CODE> , <CODE>pp2latex</CODE> and <CODE>pp2sdf</CODE> there is a <CODE>-safeOpcodes</CODE> option which allows to specify these codes.
</P>


<P>
Using <CODE>Safe</CODE> enables a PerlPoint user to control the behaviour of Active Contents (possibly written by unknown persons) very fine grained. But using this implementation in reality we recognized that dealing with <CODE>Safe</CODE> is not always sufficient because it is hard to load arbitrary modules in a compartment or even to execute <CODE>sort()</CODE> with own handlers. (At least we found no way to do it ...) So, to work around this, we finally enabled to specify the &quot;opcode&quot; ALL to bypass <CODE>Safe</CODE> completely. Instead of invoking <CODE>Safe</CODE>, embedded Perl code will then be evaluated by <CODE>eval()</CODE> in the users (probably unsafe) environment.
</P>
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.1.1.1 $
  $Date: 2004/06/12 15:13:36 $
-->

<TABLE> 
<TR>
  <TD colspan=3 >
    Next: <a href="slide0010.htm">Conditions</a>
    &nbsp;&nbsp;Previous: <a href="slide0008.htm">Macros</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Index">Contents</a>
  </td>
</TR>
</TABLE>
</BODY>
</HTML>
