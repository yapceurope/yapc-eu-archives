<HTML>
<!-- *** Created by pp2html, build 1.22 from PerlPoint-Converters 0.1001  -->
<HEAD>
<TITLE>Parsing sources</TITLE>
</HEAD>
<!-- ************************************************************** -->
<BODY bgcolor="#FFFFFF" text="#000000" link="#0000CC" vlink="#AAAAAA" alink="#FF0000">
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.1.1.1 $
  $Date: 2004/06/12 15:13:36 $
-->

<TABLE> 
<TR>
  <TD colspan=3 >
    Next: <a href="slide0015.htm">Parser Design</a>
    &nbsp;&nbsp;Previous: <a href="slide0013.htm">A Modular Concept</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Index">Contents</a>
  </td>
</TR>
</TABLE>
<a name="Parsing sources">

<H1>5.2 Parsing sources
</H1>
<IMG SRC="./pp-src-stream-e.png" ALT="./pp-src-stream-e.png">

<P>
<B><CODE>PerlPoint::Parser</CODE></B> is a class whose objects read PerlPoint input, check it for syntactical errors and translate it to the intermediate stream format. Although strictly spoken the term <I>parser</I> is reserved for pure syntactical analysis, the parser objects also do lexical analysis and some semantic checks and produce the intermediate format. This is usual practise.
</P>


<P>
Creating of a parser object and its usage are simple:
</P>


<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<FONT COLOR="#000000">
  # pragmata
  use strict;

  # load modules, declare tags
  <B>use PerlPoint::Parser;</B>
  <B>use PerlPoint::Tags::Basic;</B>

  # declare variables
  my (@stream);

  # build parser
  my <B>$parser=new PerlPoint::Parser</B>;

  # and call it
  <B>$parser-&gt;run(
               files   =&gt; \@ARGV,
               stream  =&gt; \@stream,
               ...
              )</B>;
</FONT></PRE></TD></TR></TABLE>


<P>
This is an almost complete script. (There are more options to specify but this code demonstrates the main parts of a parser call.) It scans all files specified by the command line, accepts all basic PerlPoint tags and produces the intermediate stream format which is provided in the <CODE>@stream</CODE> array.
</P>


<P>
It is possible to create more than one parser object but does not make sense because the <CODE>run</CODE> method can only be used once at a time.
</P>
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.1.1.1 $
  $Date: 2004/06/12 15:13:36 $
-->

<TABLE> 
<TR>
  <TD colspan=3 >
    Next: <a href="slide0015.htm">Parser Design</a>
    &nbsp;&nbsp;Previous: <a href="slide0013.htm">A Modular Concept</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Index">Contents</a>
  </td>
</TR>
</TABLE>
</BODY>
</HTML>
